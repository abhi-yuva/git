Git Commands:

1. git init
2. git clone 
3. git pull
4. git add
5. git commit -m "Commit Message"
6. git push
7. git status - to see in which particular area our files are exist
8. git log -  to see logs in your local repository
9. git log --oneline -  to see short description of your commits we use this command
10. git diff -  it will show you the diffences/modification done on you working area
11. git show - it is used to see a breif information of your commits
12. git restore - to move the changes from stating area to working tree/to discard the complete changes
13. git branch - to create a branch in repository
        git branch <branch_name>
14. git checkout - to move from one branch/commit to another branch/commit
        1. to move from one branch to another branch
                git checkout <branch_name>
        2. to move from one commit to another commit
                git checkout <commit_id>
        3. to go back to the immediate checkout
                git checkout - 
                ""-""  - point to the previous place from where you checkedout

15. git clean - It is used to reomve the changes which are there in untracked list
        git clean
          1. Dry Run - It will show you what are all the files will be removed from untracked list
                git clean --dry-run
          2. Intractive modifed
                git clean -i
          3. Directories
                git clean -d 
          4. Force
                git clean -f

16. git reset: I will remove the changes happen recently and get back the changes to the previous position
                Git reset have 3 types  
                  1. Soft reset - It will not remove the commit id's but it will move the changes back to staging area instead
                        git reset --soft HEAD~<position>
                  2. Hard reset - It will remove the changes along with the commit id
                        git reset --hard HEAD~<position>
                  3. Mixed Reset - It will remove the changes and will place the changes in Working Area/Tree instead of moving the changes back to staging area
                        git reset --mixed HEAD~<position>
        Positions are of 3 types
                1. Completly remove it - along with the content it will remove the Commit ID aswell
                        git reset --hard HEAD~<position>
                2. Getting back the changes to Staging Area
                        git reset --soft HEAD~<position>
                3. Getting back the changes to Working Area/Tree
                        git reset --mixed HEAD~<position>
17. git revert - 
18. git reflog - It will store all the operations alogn with the commit id's which we have lost in your original logs. Reflog will act as a backup to store your logs
                git reflog


Different Between Git Reset & Git Rervert:
------------------------------------------
When we perform git Reset the content along with commit id and commit message will be lost.
When we perform git Revert Only the content will be lost and and extra commit message & Commit ID will be created for the revert operations


Git Log --oneline:
641fb9a (HEAD -> master) added 2 extra lines
3c2de1d Revert Operation
01acc63 Revert "Performing Rever Operation"
fb79197 Performing Rever Operation


Performing Git Reset:
git reset --hard HEAD~1
-----------
OUTPUT OF GIT LOG:
-------------------------------------
3c2de1d (HEAD -> master) Revert Operation
01acc63 Revert "Performing Rever Operation"
fb79197 Performing Rever Operation


Performting Git Revert:
git revert HEAD
-----------
OUTPUT OF GIT LOG:
-------------------------------------
d5e89d5 (HEAD -> master) Reverted Data
3c2de1d Revert Operation
01acc63 Revert "Performing Rever Operation"
fb79197 Performing Rever Operation





        

    there are 2 way to checkout.
    1. directly checkout to the branch after creating the branch
                git checkout <branch_name>
    2. create the branch and checkout to the branch paralelly
                git checkout -b <branch_name>










git add - can be done in different ways

you can add all the files modifed or created or deleted into staging area from working tree/area

git add . -  here (.)Dot represents to save all the files which are there in current repository
git add file-name

git push - to push changes from your local repository to remote repository

1. directly to git push
2. do git push with the git hub repository url
3. do git push to a specific head/branch

git push origin HEAD:[branch-name]
git push --set-upstream origin [branch-name]

3 branches

1. master
2. feature
3. test


git log - it will give you the description of the changes you have done
it will contain the following things

1. Long commit ID
2. Owner information
3. Commit Message

git log --oneline -  it will show the following things
 
1. short commit ID which containg 7 characters
2. commit message


git diff: follow the below command to see the differences between 2 commits

git diff <commit1> <commit2>

to see differences between multiple commits follow the below command
git diff <startcommit>..<endcommit>


git restore: follow the below command

to get the changes from stating area to working tree
git restore --staged <file_name>

to discard the changes in working tree follow the below command
git restore <file_name>


git checkout: 





Terms:

Merge conflicts